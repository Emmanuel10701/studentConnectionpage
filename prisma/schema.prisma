// prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ================== MODELS ==================

model Subscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}

// ------------------ USER ------------------
model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?          @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  role            Role             @default(STUDENT)
  employerProfile EmployerProfile?
  studentProfile  StudentProfile?
  newsletters     Newsletter[]
  accounts        Account[]
  sessions        Session[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  passwordResets  passwordReset[]
}

enum Role {
  STUDENT
  EMPLOYER
  ADMIN
}

// ------------------ ACCOUNT ------------------
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

// ------------------ SESSION ------------------
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ------------------ VERIFICATION TOKEN ------------------
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ------------------ NEWSLETTER ------------------
model Newsletter {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  subject    String
  content    String
  sentAt     DateTime @default(now())
  sentById   String   @db.ObjectId
  sentBy     User     @relation(fields: [sentById], references: [id])
  recipients String[]
}

// ------------------ COMPANY ------------------
model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  industry    String
  description String
  foundedDate DateTime
  companySize String
  logoUrl     String

  // Contact info
  email       String
  phone       String
  website     String?

  // Address
  street      String
  city        String
  county      String
  country     String
  postalCode  String

  // Legal info
  businessRegistrationNumber String
  kraPin                     String
  businessPermitNumber       String
  licenseExpiryDate          DateTime
  vatNumber                  String
  legalName                  String

  // Socials
  linkedin   String?
  twitter    String?
  facebook   String?
  instagram  String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  employers  EmployerProfile[]
}

// ------------------ EMPLOYER PROFILE ------------------
model EmployerProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.ObjectId

  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String   @db.ObjectId

  position    String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ------------------ STUDENT PROFILE ------------------
model StudentProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  user         User   @relation(fields: [userId], references: [id])
  userId       String @unique @db.ObjectId
  institution  String
  course       String
  yearOfStudy  Int
  constituency String
  ward         String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ------------------ PASSWORD RESET ------------------
model passwordReset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
